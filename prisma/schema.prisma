// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
/// Represents a user account from an OAuth provider
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

/// Represents a user session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

/// Represents an email verification token
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

/// Main user model containing core user information
model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  accounts        Account[]
  sessions        Session[]
  
  // Profile information
  firstName       String?
  lastName        String?
  role            UserRole          @default(JOB_SEEKER)
  isProfileComplete Boolean         @default(false)
  
  // Privacy and preferences
  agreeToTerms    Boolean          @default(false)
  agreeToPrivacy  Boolean          @default(false)
  subscribeNewsletter Boolean      @default(true)
  
  // Profile relation
  profile    UserProfile?
  status          String?     

  // Job-related relations
  jobApplications JobApplication[]
  savedJobs      SavedJob[]
  jobRecommendationRatings JobRecommendationRating[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?

  @@index([email])
  @@index([deletedAt])
  @@index([role])
}

/// User roles in the system
enum UserRole {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}


/// Work type preferences
enum WorkType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  REMOTE
  HYBRID
  ON_SITE
}

/// Profile setup completion status
enum ProfileStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

/// Profile setup model for tracking wizard progress and data
model UserProfile {
  id              String              @id @default(cuid())
  userId          String              @unique
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Progress tracking
  status          ProfileStatus  @default(NOT_STARTED)
  currentStep     Int                 @default(1)
  completedSteps  Int[]               @default([])
  
  // Basic Information (Step 1)
  fullName        String?
  preferredName   String?
  location        String?
  email           String?
  phone           String?
  
  // Disability Profile (Step 2)
  disabilityTypes String[]            @default([])
  supportNeeds    String?             @db.Text
  assistiveTech   String[]            @default([])
  accommodations  String?             @db.Text
  
  // Skills & Work Preferences (Step 3)
  softSkills      String[]            @default([])
  hardSkills      String[]            @default([])
  industries      String[]            @default([])
  workArrangement String?
  
  // Education & Experience (Step 4)
  education       Json[]              @default([])
  experience      Json[]              @default([])
  
  // Documents (Step 5)
  resumeUrl       String?
  certificationUrls String[]          @default([])
  certifications  Json[]              @default([])
  
  // Preview & Additional Info (Step 6)
  customSummary   String?             @db.Text
  additionalInfo  String?             @db.Text
  
  // Timestamps
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  completedAt     DateTime?
  
  @@index([userId])
  @@index([status])
}

/// Company model for storing company information
model Company {
  id              String          @id @default(cuid())
  name            String
  description     String?         @db.Text
  website         String?
  logo            String?
  size            CompanySize?
  industry        String?
  location        String?
  culture         String?         @db.Text
  values          String[]        @default([])
  
  // Contact information
  contactEmail    String?
  contactPhone    String?
  
  // Social links
  linkedinUrl     String?
  twitterUrl      String?
  
  jobs            Job[]
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([industry])
  @@index([size])
}

/// Job posting model
model Job {
  id                  String              @id @default(cuid())
  title               String
  slug                String              @unique
  description         String              @db.Text
  responsibilities    String[]            @default([])
  requirements        String[]            @default([])
  preferredSkills     String[]            @default([])
  benefits            String[]            @default([])
  
  // Company relation
  companyId           String
  company             Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Job details
  location            String
  workType            WorkType
  isRemote            Boolean             @default(false)
  isHybrid            Boolean             @default(false)
  experience          ExperienceLevel
  salaryMin           Int?
  salaryMax           Int?
  salaryCurrency      String              @default("USD")
  
  // Accommodations
  accommodations      AccommodationType[] @default([])
  accommodationDetails String?            @db.Text
  
  // Application process
  applicationProcess  String[]            @default([])
  applicationDeadline DateTime?
  
  // Status and visibility
  status              JobStatus           @default(DRAFT)
  isActive            Boolean             @default(false)
  isFeatured          Boolean             @default(false)
  
  // SEO and metadata
  metaTitle           String?
  metaDescription     String?
  
  // Relations
  applications        JobApplication[]
  savedJobs           SavedJob[]
  recommendationRatings JobRecommendationRating[]
  
  // Tracking
  viewCount           Int                 @default(0)
  applicationCount    Int                 @default(0)
  
  // Timestamps
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  publishedAt         DateTime?
  closedAt            DateTime?
  
  @@index([companyId])
  @@index([status])
  @@index([workType])
  @@index([experience])
  @@index([isActive])
  @@index([publishedAt])
  @@index([accommodations])
}

/// Job application model
model JobApplication {
  id              String                    @id @default(cuid())
  jobId           String
  userId          String
  
  job             Job                       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user            User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Application data
  coverLetter     String?                   @db.Text
  resumeUrl       String?
  customAnswers   Json[]                    @default([])
  
  // Status tracking
  status          ApplicationStatus         @default(PENDING)
  
  // Timeline
  appliedAt       DateTime                  @default(now())
  reviewedAt      DateTime?
  interviewAt     DateTime?
  rejectedAt      DateTime?
  acceptedAt      DateTime?
  
  // Notes from employer
  employerNotes   String?                   @db.Text
  
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  
  @@unique([jobId, userId])
  @@index([userId])
  @@index([jobId])
  @@index([status])
}

/// Saved jobs model
model SavedJob {
  id          String    @id @default(cuid())
  jobId       String
  userId      String
  
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  
  @@unique([jobId, userId])
  @@index([userId])
  @@index([jobId])
}

/// Accommodation types enum
enum AccommodationType {
  VISUAL
  HEARING
  MOBILITY
  COGNITIVE
  MOTOR
  SOCIAL
  SENSORY
  COMMUNICATION
  LEARNING
  MENTAL_HEALTH
}

/// Company size enum
enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

/// Experience level enum
enum ExperienceLevel {
  ENTRY_LEVEL
  JUNIOR
  MID_LEVEL
  SENIOR
  LEAD
  EXECUTIVE
}

/// Job status enum
enum JobStatus {
  DRAFT
  PUBLISHED
  PAUSED
  CLOSED
  EXPIRED
}

/// Job recommendation rating model
model JobRecommendationRating {
  id              String    @id @default(cuid())
  userId          String
  jobId           String
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  job             Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  // Rating data
  rating          Int       // Rating from 1-5 or 1-10
  feedback        String?   @db.Text
  reason          RatingReason?
  
  // Recommendation context
  recommendedBy   String?   // AI, algorithm, or manual
  matchScore      Float?    // Algorithm match percentage
  
  // Tracking
  isHelpful       Boolean?  // Whether user found the recommendation helpful
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([userId, jobId])
  @@index([userId])
  @@index([jobId])
  @@index([rating])
  @@index([recommendedBy])
}

/// Rating reason enum
enum RatingReason {
  PERFECT_MATCH
  GOOD_FIT
  SOME_INTEREST
  NOT_RELEVANT
  POOR_MATCH
  ALREADY_APPLIED
  LOCATION_ISSUE
  SALARY_MISMATCH
  SKILL_MISMATCH
  ACCOMMODATION_CONCERN
}

/// Application status enum
enum ApplicationStatus {
  PENDING
  REVIEWING
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  OFFER_EXTENDED
  ACCEPTED
  REJECTED
  WITHDRAWN
}
