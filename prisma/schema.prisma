// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
/// Represents a user account from an OAuth provider
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

/// Represents a user session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

/// Represents an email verification token
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

/// Main user model containing core user information
model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  accounts        Account[]
  sessions        Session[]
  
  // Profile information
  firstName       String?
  lastName        String?
  role            UserRole          @default(JOB_SEEKER)
  isProfileComplete Boolean         @default(false)
  
  // Privacy and preferences
  agreeToTerms    Boolean          @default(false)
  agreeToPrivacy  Boolean          @default(false)
  subscribeNewsletter Boolean      @default(true)
  
  // Profile relation
  profile    UserProfile?
  status          String?     

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?

  @@index([email])
  @@index([deletedAt])
  @@index([role])
}

/// User roles in the system
enum UserRole {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}


/// Work type preferences
enum WorkType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  REMOTE
  HYBRID
  ON_SITE
}

/// Profile setup completion status
enum ProfileStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

/// Profile setup model for tracking wizard progress and data
model UserProfile {
  id              String              @id @default(cuid())
  userId          String              @unique
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Progress tracking
  status          ProfileStatus  @default(NOT_STARTED)
  currentStep     Int                 @default(1)
  completedSteps  Int[]               @default([])
  
  // Basic Information (Step 1)
  fullName        String?
  preferredName   String?
  location        String?
  email           String?
  phone           String?
  
  // Disability Profile (Step 2)
  disabilityTypes String[]            @default([])
  supportNeeds    String?             @db.Text
  assistiveTech   String[]            @default([])
  accommodations  String?             @db.Text
  
  // Skills & Work Preferences (Step 3)
  softSkills      String[]            @default([])
  hardSkills      String[]            @default([])
  industries      String[]            @default([])
  workArrangement String?
  
  // Education & Experience (Step 4)
  education       Json[]              @default([])
  experience      Json[]              @default([])
  
  // Documents (Step 5)
  resumeUrl       String?
  certificationUrls String[]          @default([])
  certifications  Json[]              @default([])
  
  // Preview & Additional Info (Step 6)
  customSummary   String?             @db.Text
  additionalInfo  String?             @db.Text
  
  // Timestamps
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  completedAt     DateTime?
  
  @@index([userId])
  @@index([status])
}
